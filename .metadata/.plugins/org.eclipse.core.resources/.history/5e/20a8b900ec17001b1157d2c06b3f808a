package chap05.oracle;

import java.sql.*;
import java.util.*;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class PersonDAO implements InterPersonDAO {

	private DataSource ds; // DataSource ds 이 아파치톰캣이 제공하는 DBCP(DB Connection Pool) 이다.
	private Connection conn; 
	private PreparedStatement pstmt; 
	private ResultSet rs;
	
	
	public PersonDAO() {
		try {
			Context initContext = new InitialContext();
		    Context envContext  = (Context)initContext.lookup("java:/comp/env");
		    ds = (DataSource)envContext.lookup("jdbc/jspbegin_oracle");
		} catch(NamingException e) {
			e.printStackTrace();
		}
	}
	
	
	private void close() {
		try {
			if(rs != null)    {rs.close();    rs=null;}
			if(pstmt != null) {pstmt.close(); pstmt=null;}
			if(conn != null)  {conn.close();  conn=null;}
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	// 개인성향을 입력해주는 메소드 ==> insert 
	@Override
	public int personRegister(PersonDTO psdto) throws SQLException {
	
		int n = 0;
		
		try {
		
			conn = ds.getConnection();
			
			// conn.setAutoCommit(true);   // 오토커밋(기본값)
			// conn.setAutoCommit(false);  // 수동커밋 
			
			String sql = " insert into tbl_person_interest(seq, name, school, color, food) " 
					   + " values(person_seq.nextval, ?, ?, ?, ?) ";
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, psdto.getName());
			pstmt.setString(2, psdto.getSchool());
			pstmt.setString(3, psdto.getColor());
			pstmt.setString(4, psdto.getStrFood());
			
			n = pstmt.executeUpdate();
			
		} finally {
			close();
		}
		
		return n;
	}


	// tbl_person_interest 테이블에 저장된 모든행들을 select 해주는 메소드 
	@Override
	public List<PersonDTO> selectAll() throws SQLException {
		
		List<PersonDTO> personList = new ArrayList<>();
		
		try {
		
			conn = ds.getConnection();
			
			String sql = "select seq, name, school, color, food, to_char(registerday, 'yyyy-mm-dd hh24:mi:ss') AS registerday "+
					     "from tbl_person_interest "+
					     "order by seq";
			
			pstmt = conn.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				
				PersonDTO psdto = new PersonDTO();
				psdto.setSeq(rs.getInt(1));
				psdto.setName(rs.getString(2));
				psdto.setSchool(rs.getString(3));
				psdto.setColor(rs.getString(4));
				psdto.setFood(rs.getString(5).split("\\,"));
				psdto.setRegisterday(rs.getString(6));
				
				personList.add(psdto);
				
			}// end of while(rs.next())-------------------------------
		
		} finally {
			close();
		}
		
		return personList;
	}


	// tbl_person_interest 테이블에 저장된 특정 1개행만 select 해주는 메소드
	@Override
	public PersonDTO selectOne(String seq) throws SQLException {

		PersonDTO psdto = null;
		
		try {
			conn = ds.getConnection();
			
			String sql = "select seq, name, school, color, food, to_char(registerday, 'yyyy-mm-dd hh24:mi:ss') AS registerday "+
					     "from tbl_person_interest "+
					     "where seq = ? ";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, seq);
			
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				
				psdto = new PersonDTO();
				psdto.setSeq(rs.getInt(1));
				psdto.setName(rs.getString(2));
				psdto.setSchool(rs.getString(3));
				psdto.setColor(rs.getString(4));
				psdto.setFood(rs.getString(5).split("\\,"));
				psdto.setRegisterday(rs.getString(6));
				
			}// end of if(rs.next())-------------------------------
		
		} finally {
			close();
		}
		
		return psdto;		
	}


	// 개인성향을 수정해주는 메소드 ==> update 
	@Override
	public int personUpdate(PersonDTO psdto) throws SQLException {
	
		int n = 0;
		
		try {
		
			conn = ds.getConnection();
			
			// conn.setAutoCommit(true);   // 오토커밋(기본값)
			// conn.setAutoCommit(false);  // 수동커밋 
			
			String sql = " update tbl_person_interest set name = ?, school = ?, color = ?, food = ? " 
					   + " where seq = ? "; 
				
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, psdto.getName());
			pstmt.setString(2, psdto.getSchool());
			pstmt.setString(3, psdto.getColor());
			pstmt.setString(4, psdto.getStrFood());
			pstmt.setInt(5, psdto.getSeq());
			
			n = pstmt.executeUpdate();
			
		} finally {
			close();
		}
		
		return n;
	}
		
}

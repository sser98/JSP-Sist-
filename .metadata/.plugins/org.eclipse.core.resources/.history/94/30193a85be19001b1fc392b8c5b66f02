package member.model;

import java.sql.*;
import java.util.*;


import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;



public class MemberDAO implements InterMemberDAO {

	private DataSource ds;
	// DataSource ds 는 아파치톰캣이 제공하는 DBCP(DB Connection Pool) 이다.
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	
	// 생성자
	public MemberDAO() {
		
		try {
			Context initContext = new InitialContext();
		    Context envContext  = (Context)initContext.lookup("java:/comp/env");
		    ds = (DataSource)envContext.lookup("jdbc/mymvc_user");
		} catch(NamingException e) {
			e.printStackTrace();
		}
		
		
	}
	
	// 사용한 자원을 반납하는 메소드.
	private void close() {
		try {
			if(rs != null)    {rs.close();    rs=null;}
			if(pstmt != null) {pstmt.close(); pstmt=null;}
			if(conn != null)  {conn.close();  conn=null;}
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	

	@Override
	public int registerMember(MemberVO member) throws SQLException {
		
		int result = 0;
		
		try {
			
			conn=ds.getConnection();
			String sql = "insert into tbl_member(userid, pwd, name, email, mobile, postcode, address, detailaddress, extraaddress, gender, birthday) "
					+ "values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			
			pstmt=conn.prepareStatement(sql);
			
			// 맵핑하는 과정.
			pstmt.setString(1, member.getUserid());
			pstmt.setString(2, member.getPwd());
			pstmt.setString(3, member.getName());
			pstmt.setString(4, member.getEmail());
			pstmt.setString(5, member.getMobile());
			pstmt.setString(6, member.getPostcode());
			pstmt.setString(7, member.getAddress());
			pstmt.setString(8, member.getDetailaddress());
			pstmt.setString(9, member.getExtraaddress());
			pstmt.setString(10, member.getGender());
			pstmt.setString(11, member.getBirthday());
			
			result=pstmt.executeUpdate();
			
		} finally {
			close();
		}
		
		return result;
	}

	// id 중복검사 (tbl_member 테이블에서 userid가 존재하면 true를 리턴해주고, userid 가 존재하지 않으면 false를 준다.
	@Override
	public boolean idDuplicateCheck(String userid) throws SQLException{
		
		boolean isExist = false;
		
		try {
			
			conn = ds.getConnection();
			
			String sql = " select userid\n"+
					" from tbl_member\n"+
					" where userid=? ";
			
			pstmt=conn.prepareStatement(sql);
			
			pstmt.setString(1, userid);
			
			rs= pstmt.executeQuery();
			
			
			isExist = rs.next(); // 행이 있으면 중복된 아이디 없으면 사용이 가능한 user 아이디.
			
		} finally {
			close();
		}
		return isExist;
	}

	@Override
	public boolean emailDuplicateCheck(String email) throws SQLException {
		
		boolean isemailExists = false;
		
		try {
			
			conn = ds.getConnection();
			
			String sql = " select email\n"+
					" from tbl_member\n"+
					" where userid=? ";
			
			pstmt=conn.prepareStatement(sql);
			
			pstmt.setString(1, email);
			
			rs= pstmt.executeQuery();
			
			
			isemailExists = rs.next(); // 행이 있으면 중복된 아이디 없으면 사용이 가능한 user 아이디.
			
		} finally {
			close();
		}
		return isemailExists;
		
	}



}

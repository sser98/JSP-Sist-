package common.controller;

import java.io.*;
import java.util.*;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebInitParam;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class FrontController1
 */
@WebServlet(
		description = "사용자가 웹에서 *.up을 했을떄 사용하는", 
		urlPatterns = { "*.up" }, 
		initParams = { 
			@WebInitParam(name = "propertyConfig", value = "D:/NCS/workspace(jsp)/MyMVC/WebContent/WEB-INF/Command.properties", description = "*.up 에 대한 클래스의 매핑파일")
			// \ 하나는 인식못하고 \\ 두개적어줘야함
		 	// 차라리 /를 쓰자.
			
		})

public class FrontController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	Map<String, Object> cmdMap= new HashMap<>(); 
	
	public void init(ServletConfig config) throws ServletException {
			
		/*
		
        웹브라우저 주소창에서  *.up 을 하면 FrontController 서블릿이 응대를 해오는데 
        맨 처음에 자동적으로 실행되어지는 메소드가 init(ServletConfig config) 이다.
        여기서 중요한 것은 init(ServletConfig config) 메소드는 WAS(톰캣)가 구동되어진 후
        딱 1번만 init(ServletConfig config) 메소드가 실행되어지고, 그 이후에는 실행이 되지 않는다. 
        그러므로 init(ServletConfig config) 메소드에는 FrontController 서블릿이 동작해야할 환경설정을 적용해 준다.
		*/
		
		
			// *** 확인용 *** //
		    // System.out.println("~~~ 확인용 => 서블릿 FrontController 의  init(ServletConfig config) 메소드가 실행됨.");
		    // ~~~ 확인용 => 서블릿 FrontController 의  init(ServletConfig config) 메소드가 실행됨.
		
		
		Properties pr = new Properties();
		/* Properties 는 Collection 중 HashMap 계열중의  하나로써
	       "key","value"으로 이루어져 있는것이다.
	       그런데 중요한 것은 Properties 는 key도 String 타입이고, value도 String 타입만 가능하다는 것이다.
	       key는 중복을 허락하지 않는다. value 값을 얻어오기 위해서는 key값만 알면 된다.
	       
	       
	    */ 
		
		
		FileInputStream fis = null;
		// 특정 파일에 있는 내용을 읽어오기 위한 용도로 쓰이는 객체
		
		try {
			String props=config.getInitParameter("propertyConfig");
			System.out.println(props);
			
			fis = new FileInputStream(props);
			// fis는 해당 경로에 있는 파일을 읽어오자.
			
			pr.load(fis);
			/*
			 * pr.load(fis);은 fis 객체를 사용하여 D:/NCS/workspace(jsp)/MyMVC/WebContent/WEB-INF/Command.properties 파일 이름을 읽어다가
			 * Properties 클래스의 객체인 pr에 load 시켜 준다.
			 * 그러면 pr은 읽어온 파일(Command.properties)의 내용에서
			 * = 을 기준으로 왼쪽은 key로 보고, 오른쪽은 value로 인식한다. 따라서 파일에 /index.up=서블릿 경로.를 쓴다.
		
			 */
			
			Enumeration<Object> En = pr.keys();
			
			
			/*
			 *  pr.keys();은  D:/NCS/workspace(jsp)/MyMVC/WebContent/WEB-INF/Command.properties안에 저장되어있는
			 *  키값을 가져오는 메소드.
			 */
				while(En.hasMoreElements()) {
					
					String key =(String) En.nextElement();
					
				    /* System.out.println("~~~~ 확인용 key => " + key);
			           System.out.println("~~~~ 확인용 value => " + pr.getProperty(key));
					   ~~~~ 확인용 key => /index.up
					   ~~~ 확인용 value => common.controller.IndexController
					   ~~~~ 확인용 key => /main.up
					   ~~~~ 확인용 value => common.controller.MainController
					   클래스화 시켜야 한다.
					   
					   요소가 2개가 있으므로 2번 반복된다.
					   
					*/
					
					String className=pr.getProperty(key);
					
					if(className!=null) {
						
						className = className.trim();
						
						Class<?> cls=Class.forName(className);
						// <?>은 generic 인데 어떤 클래스 타입인지는 모르지만 하여튼 클래스 타입이 들어온다는 것입니다.
						
						// String 타입으로 되어진 className 을 클래스화 시켜주는 것이다.
			            // 주의할 점은 실제로 String 으로 되어져 있는 문자열이 클래스로 존재해야만 한다는 것이다.
						
						
						@SuppressWarnings("deprecation")
						Object obj = cls.newInstance();
						// newInstance()는 클래스로부터 실제 객체(인스턴스)를 생성해주는 메소드
						
						/* 
						  System.out.println("~~~~ 확인용 obj.toString => " + obj.toString());
						
						  ~~~~ 확인용 obj.toString => @@@클래스 IndexController의 인스턴스 메소드 toString() 호출함@@@
						  ~~~~ 확인용 obj.toString => ###클래스 IndexController의 인스턴스 메소드 toString() 호출함###
						 */
						cmdMap.put(key, obj);
						// cmdMap 에서 키값으로 Command.properties 파일에 저장되어진 url 을 주면 
			            // cmdMap 에서 해당 클래스에 대한 객체(인스턴스)를 얻어오도록 만든 것이다.
						
						
						
						
						
						
					} // end of if(className!=null) --------------
				
					
				} // end of While() ..........
			
			
			} 
			  catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (FileNotFoundException e) {
				System.out.println("property파일이 없습니다.");
				e.printStackTrace();
			} catch(IOException e ) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			
			

		
			

	
		
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		requestProcess(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		requestProcess(request, response);
	}
	
	private void requestProcess(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		
	    
		/* 웹브라우저의 주소 입력창에서 
	     http://localhost:9090/MyMVC/member/idDuplicateCheck.up?userid=leess 와 같이 입력되었더라면
	     String url = request.getRequestURL().toString();
	     System.out.println("~~~ 확인용 url => " + url);
	     ~~~ 확인용 url => http://localhost:9090/MyMVC/member/idDuplicateCheck.up
	    */
	    
	    String uri = request.getRequestURI();
	    // System.out.println("~~~ 확인용 uri => " + uri);
	    // ~~~ 확인용 uri => /MyMVC/member/idDuplicateCheck.up
	    
	    // /MyMVC/main.up / MyMVC/index.up
		
	}
}

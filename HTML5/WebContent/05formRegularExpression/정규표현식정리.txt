>>> 정규표현식 <<<
정규표현식(正規表現式, Regular Expression)은 문자열을 처리하는 방법 중의 하나로 특정한 조건의 문자를 '검색'하거나 '치환'하는 과정을 매우 간편하게 처리 할 수 있도록 하는 수단이다.

정규식 표현 설명되어 있는 곳
http://zvon.org/comp/r/tut-Regexp.html#Pages-Contents

정규식 표현 실행해보는 곳
http://gskinner.com/RegExr

1. 정규표현식은 기본적으로 대,소문자를 구분한다.
2. 정규표현식은 기본적으로 공백, 탭, 개행키도 구분한다.

Source : who is who  

Case 1
Regular Expression: ^who  (소스에서 who로 시작하는곳)

First match: who is who 
             ---
All matches: who is who 
             ---

Case 2
Regular Expression: who$  (소스에서 who로 끝나는곳)

First match: who is who 
                    ---
All matches: who is who
                    --- 

========================================================================
$와 ^은 정규식 패턴에 사용하는 패턴문자인데 그런데 만약에 소스상에 $가 있어서
그 $를 찾으려면 어떻게 해야 할까?

Source

$12$ \-\ $25$  

Case 1
Regular Expression: ^$

First match:  $12$ \-\ $25$ 

All matches:  $12$ \-\ $25$ 


Case 2
Regular Expression: \$      

\(escape)다음에 오는 정규식패턴 1개 문자( ^ $ \ . [ ] - (  ) )만 정규식패턴문자로 인식하지 않고 그냥 보통문자로 인식한다.
그러므로 \(escpae)도 특별한 의미를 가지는 정규식패턴 문자이다.

First match:  $12$ \-\ $25$ 
              -
All matches:  $12$ \-\ $25$ 
              -  -     -  -

Case 3
Regular Expression: ^\$  (소스에서 $로 시작하는곳)


First match: $12$ \-\ $25$ 
             -
All matches: $12$ \-\ $25$ 
             -

Case 4
Regular Expression: \$$  (소스에서 $로 끝나는곳)


First match: $12$ \-\ $25$ 
                         -
All matches: $12$ \-\ $25$ 
                         -

Case 5
Regular Expression: \\ (소스에서 \ 인곳)

First match: $12$ \-\ $25$ 
                  -
All matches: $12$ \-\ $25$ 
                  - -


========================================================================

 . 은 아무 문자(공백이든 특수기호이든 하여튼 모든것) 1글자를 뜻하는 정규식패턴 문자임.
 그래서 . 도 특별한 의미를 가지는 정규식패턴 문자이다.


Source

Regular expressions are powerful!!!  

Case 1
Regular Expression: . (아무글자 한개)

First match: Regular expressions are powerful!!! 
             - 
All matches: Regular expressions are powerful!!! 
             -----------------------------------

Case 2
Regular Expression: ...... (.이 6개임. 6개글자를 한묶음으로 하겠다는 뜻)


First match: Regular expressions are powerful!!! 
             ------

All matches: Regular expressions are powerful!!! 
             ------------------------------
            (6개글자를 한묶음으로 처리하므로 남은 5개문자 ul!!!은 해당되지 않으므로 남은 것임)



Source

O.K.  

Case 1
Regular Expression: .  (아무문자 1글자)

First match: O.K. 
             -
All matches: O.K. 
             ----

Case 2
Regular Expression: \. (문자 . 을 뜻함)

First match: O.K. 
              -
All matches: O.K. 
              - -

Case 3
Regular Expression: \..\.  (.아무문자. 를 뜻함)


First match: O.K. 
              ---

All matches: O.K. 
              ---

========================================================================

문자1개의 후보군을 사용할때 [] 을 사용한다.

Source

How do you do?  

Case 1
Regular Expression: [oyu]  []은 문자1개를 뜻한다. => o or y or u


First match: How do you do? 
                  -
All matches: How do you do? 
                   -    - ---    -

Case 2
Regular Expression: [dH]. => (d or H) + 아무글자 1개   

First match: How do you do? 
                --
All matches: How do you do? 
                 --    --       --

Case 3
Regular Expression: [owy][yow]   (o or w or y) 중에하나  + ( y or o or w) 중에하나
(oy  oo  ow  wy  wo  ww  yy  yo  yw 를 뜻함)

First match: How do you do? 
                  --

All matches: How do you do? 
                 --    --

========================================================================

[-] 에서 - 은 범위를 나타내는 정규식패턴 문자이다.

Source

ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  

Case 1
Regular Expression: [C-K]  (알파벳 순서로  대문자 C 에서 K 까지를 말한다.) 


First match:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
  -
All matches:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
  ---------

Case 2
Regular Expression: [CDEFGHIJK]


First match:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
  -
All matches:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
  ---------

Case 3
Regular Expression: [a-d]

First match:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
                           -
All matches:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
                           ----
Case 4
Regular Expression: [2-6]

First match:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
                                                        -
All matches:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
                                                        -----

Case 5
Regular Expression: [C-Ka-d2-6]

First match:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
    -
All matches:  C>K / a>d / 2>6
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
    ---------                               ----                                   -----


==============================================================================

 ^ 은 시작이라는 의미의 정규식 패턴 문자이지만, ^ 이 []속에 들어가서 쓰이면 not 이라는 부정의 뜻으로 사용된다.

Source

ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  

Case 1
Regular Expression: [^CDghi45]  CDghi45 각각 하나가 아닌것!!!

First match:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
-

All matches:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
--     ----------------------------------------    --------------------------    ----
Case 2


Regular Expression: [^W-Z] =  not W~Z

First match:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
-

All matches:
ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789 
----------------------     -------------------------------------

========================================================================

서브패턴 () 속에서 사용되어지는 | 은 "문자열을 구분하는 구분자"로써 '또는' 이라는 의미를 가진다.
()는 정규식내에서 패턴을 그룹화 할 때 사용한다.


Source

Monday Tuesday Friday  

Case 1
Regular Expression: (on|ues|rida)


First match: Monday Tuesday Friday 
                  --
All matches: Monday Tuesday Friday 
                   --       ---       ----

Case 2
Regular Expression: (Mon|Tues|Fri)day (mon or Tues or Fri) + day


First match: Monday Tuesday Friday 
                ------
All matches: Monday Tuesday Friday 
                ------ ------- ------


Case 3
Regular Expression: ..(i|es|n)day


First match:Monday Tuesday Friday 
               ------
All matches:Monday Tuesday Friday 
                ------    -------  ------


========================================================================

※ 수량자(Quantifiers) : 어떠한 패턴이 몇번 만큼 등장하는 것인가를 나타내는 것이다.

  * 은  0 에서 여러개. 
      즉, *앞에 오는 문자가 있을 수도 있고, 없을 수도 있고, 있다면 여러번 나올수도 있다는 뜻.

  + 은  1 에서 여러개.
      즉, +앞에 오는 문자가 적어도 1개 이상 여러번 나올수도 있다는 뜻.

  ? 은  없거나 있다면 오로지 1개만.
      즉, ?앞에 오는 문자가 없거나, 있다면 딱 1개만 나올수도 있다는 뜻.

  . 은 정확히 문자 1개만.


Source

aabc abc bc  

Case 1
Regular Expression: a*b (*앞에 a가 있으므로 b앞에는 a가 1개이상 여러개 있어도 되고 a가 없어도 된다.)

First match:aabc abc bc 
              ---
All matches:aabc abc bc 
                ---   --   -

Case 2
Regular Expression: a+b (+앞에 a가 있으므로 b앞에는 a가 적어도 1개이상 여러개 있어야 한다.)  a b앞에는 있어야한다                       

First match:aabc abc bc 
               ---
All matches:aabc abc bc 
                ---   --

Case 3
Regular Expression: a?b (?앞에 a가 있으므로 b앞에는 a가 없든지, 있다라면 a는 오로지 1개만 있어야 한다.)                       

First match: aabc abc bc 
                      --
All matches: aabc abc bc 
                       --   -

===============================================================================

Source

-@- *** -- "*" -- *** -@-  

Case 1
Regular Expression: .*  (*앞에 아무문자를 뜻하는 .이 있으므로 
                                                 아무문자가 1개이상 여러개 있어도 되고 아무문자가 없어도 된다.
                                                 그러므로 모든 글자를 뜻한다)


First match: -@- *** -- "*" -- *** -@- 
             -------------------------
All matches: -@- *** -- "*" -- *** -@- 
             -------------------------

Case 2
Regular Expression:  -A*-  (마지막 대시(-) 앞에 A는 있어도 되고 없어도 되고, A가 있으면 A가 몇개 이상 와도 관계없다. 
                                                       그리고 그 앞에는 대시(-)가 반드시 와야 한다.)
                     

First match: -@- *** -- "*" -- *** -@- 
                     --
All matches: -@- *** -- "*" -- *** -@- 
                     --     --

Case 3
Regular Expression: [-@]*  (글자후보군에서 대시(-) 또는 @가 있어도 되고 없어도 되고 
                                                       있으면 몇개 이상 와도 관계없다.)
                    

First match: -@- *** -- "*" -- *** -@- 
             ---
All matches: -@- *** -- "*" -- *** -@- 
             ---     --     --     ---

===============================================================================

Source

-@@@- * ** - - "*" -- * ** -@@@-  

Case 1
Regular Expression: \*+   ( \*이므로 그냥문자 *을 말하는 것이고, + 이므로 그냥문자 *이 최소한 1개 이상
                                                     여러개가 와도 상관없다라는 말이다.)
                     

First match: -@@@- * ** - - "*" -- * ** -@@@- 
                   -
All matches: -@@@- * ** - - "*" -- * ** -@@@- 
                   - --      -     - -- 

Case 2
Regular Expression: -@+-  (앞과 뒤에는 반드시 대시(-)가 와야 하고, 그 중간에 @는 최소한 1개 이상
                                                      또는 여러개 와도 상관없다는 말이다.)
                    
First match: -@@@- * ** - - "*" -- * ** -@@@- 
             -----
All matches: -@@@- * ** - - "*" -- * ** -@@@- 
             -----                      -----
                       

Case 3  ==> 문자열에서 공백제거하기

Regular Expression: [^ ]+   ( 공백을 뺀 나머지 글자가 최소한 1개 이상 또는 여러개 와도 상관없다는 말이다.) 
			공백을 뺀 나머지

First match: -@@@- * ** - - "*" -- * ** -@@@- 
                ----- 
All matches: -@@@- * ** - - "*" -- * ** -@@@- 
                 -----     - -- - - --- -- - -- -----


===============================================================================


Source

--XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@-  

Case 1
Regular Expression: -X?XX?X   (첫번째 ?앞에 X는 없거나 있으려면 반드시 1개 있어야 하고,
                                                              두번째 ?앞에도 X는 없거나 있으려면 반드시 1개 있어야 한다.)
                                                              즉, -XXXX 또는 -XXX 또는 -XX를 검색하는 것이다.)

First match: --XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@- 
              ---
All matches: --XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@- 
              ---  ---   ---    ---     ---

             
Case 2
Regular Expression: -@?@?@?-  (첫번째 ?앞에 @는 없거나 있다라면 반드시 @ 1개만 있어야 하고,
                                                             두번째 ?앞에도 @는 없거나 있다라면 반드시 @ 1개만 있어야 한다.
                                                             세번째 ?앞에도 @는 없거나 있다라면 반드시 @ 1개만 있어야 한다.
                                                             즉, -@@@- 또는 -@@- 또는 -@- 또는 -- 를 검색하는 것이다.)


First match: --XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@- 
             --  

All matches: --XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@- 
             --  ---  ----  -----          ----

Case 3
Regular Expression: [^@]@?@  (첫번째 글자는 @가 아닌 문자가 오고, 
                                                           두번째 글자는 @가 오든지 아니면 없어야 하고,
                                                          세번째 문자는 @가 와야 한다.
                                                          즉, @가아닌아무글자1개@@ 또는 @가아닌아무글자1개@ 를 검색하는 것이다.)

First match: --XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@- 
                 --
All matches: --XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@ 
                 --   ---   ---    ---     ------

===============================================================================

※ 정확한 수량의 갯수를 알아오기 위해서는 {수량갯수}를 사용해서 표현하면 된다.


Source

One ring to bring them all and in the darkness bind them  

Case 1
Regular Expression: .{5}  (아무글자 5글자씩을 말한다.)


First match: One ring to bring them all and in the darkness bind them 
             -----
All matches: One ring to bring them all and in the darkness bind them 
             -------------------------------------------------------

Case 2
Regular Expression: [els]{1,3}  ( e 나 l 이나 s 가 1개 이상 3개 이하로 등장하는것)
                       [e or s] {e는 1개 이상 s는 3개 이하}

First match: One ring to bring them all and in the darkness bind them 
               -
All matches: One ring to bring them all and in the darkness bind them 
               -                 -   --          -      ---        -

Case 3  ==> 소문자 3개 이상을 뜻함.
Regular Expression: [a-z]{3,}  ( a 부터 z까지가 3개 이상으로 등장하는것)
			a~z 까지 3개이상  ,은 3개이상 무한대~ a~z 순서대로가 아님

First match: One ring to bring them all and in the darkness bind them 
                     ----
All matches: One ring to bring them all and in the darkness bind them 
                       ----    ----- ---- --- ---    --- -------- ---- ---- 

====================================================================================

Source

AA ABA ABBA ABBBA  

Case 1
Regular Expression: AB*A   ( AB{0,}A 와 같은 뜻 ) 대문자 A와 A사이에 B가 없던지 여러개

First match: AA ABA ABBA ABBBA 
                --
All matches: AA ABA ABBA ABBBA 
                    -- --- ---- -----

Case 2
Regular Expression: AB{0,}A ( AB*A 와 같은 뜻 )

First match: AA ABA ABBA ABBBA 
             --
All matches: AA ABA ABBA ABBBA 
             -- --- ---- -----

Case 3
Regular Expression: AB+A   ( AB{1,}A 와 같은 뜻 )

First match: AA ABA ABBA ABBBA 
                ---
All matches: AA ABA ABBA ABBBA 
                --- ---- -----

Case 4
Regular Expression: AB{1,}A ( AB+A 와 같은 뜻 )

First match:AA ABA ABBA ABBBA 
               ---
All matches:AA ABA ABBA ABBBA 
               --- ---- -----

Case 5
Regular Expression:  AB?A   ( AB{0,1}A 와 같은 뜻 )

First match: AA ABA ABBA ABBBA 
             --
All matches: AA ABA ABBA ABBBA 
             -- ---

Case 6
Regular Expression: AB{0,1}A ( AB?A 와 같은 뜻 )

First match:AA ABA ABBA ABBBA 
            --
All matches:AA ABA ABBA ABBBA 
            -- ---
 
====================================================================================

Source

One ring to bring them all and in the darkness bind them  

Case 1
Regular Expression: r.*   ( * 앞에 온 글자가 . 이므로 아무글자가 여러개 올수도 있고,
                                                        또는 아무글자가 1개 또는 없을수도 있다는 말이므로
                            r로 시작하는 모든 글자를 뜻함.)


First match: One ring to bring them all and in the darkness bind them 
                 ---------------------------------------------------- 
All matches: One ring to bring them all and in the darkness bind them 
                 ----------------------------------------------------


Case 2
Regular Expression: r.*?  ( 원래 수량자 ? 는 없거나 1개를 뜻하는 것인데 
                                                       수량자(* + ?) 다음에 바로 ? 가 붙으면 ? 의 뜻이 달라진다.
                            ? 앞에 붙은 수량자의 범위는 그 수량자의 범위에서 제일 적은수를 
                                                        나타내라는 뜻으로 사용 되어진다.
                                                        그래서 *은 0~n 인데 제일 적은 수인 0 이 되어진다.
                                                        그러므로 r 다음의 . 의 수량은 0 이 되어지므로 아무글자도 오지 못한다는 뜻이 된다. 
                                                        즉, 글자 r 1개만 뜻한다.)


First match: One ring to bring them all and in the darkness bind them 
                 -
All matches: One ring to bring them all and in the darkness bind them 
                 -        -                          -     

Case 3
Regular Expression: r.+  ( r 다음에 아무글자 1개 이상을 뜻함)

First match: One ring to bring them all and in the darkness bind them 
                 ---- 
All matches: One ring to bring them all and in the darkness bind them 
                 ----------------------------------------------------


Case 4
Regular Expression: r.+?  ( r 다음에 아무글자 1개만 뜻함)

First match: One ring to bring them all and in the darkness bind them 
                 --
All matches: One ring to bring them all and in the darkness bind them 
                 --       --                         --


Case 5
Regular Expression: r.?  ( r 다음에 글자가 없든지 아무글자 1개만 뜻함)

First match: One ring to bring them all and in the darkness bind them 
                 --
All matches: One ring to bring them all and in the darkness bind them 
                 --       --                         -


Case 6
Regular Expression: r.?? ( 수량자 ? 다음에 ? 이 붙었으므로 제일 적은 수인 0 이 된다.
                                                      즉 r.{0} 이므로 r 다음에 글자가 없다는것을 뜻함. 
                                                      즉, 글자 r 1개만 뜻한다.)

First match: One ring to bring them all and in the darkness bind them 
                 -
All matches: One ring to bring them all and in the darkness bind them 
                 -        -                          -

=========================================================================================

Source

A1 B2 c3 d_4 e:5 ffGG77--__--  

Case 1
Regular Expression: \w (소문자 w임)  (word 단어라는 뜻이 된다. 
                                                                      단어는 [A-z0-9_] 을 의미하는 것이다. 
                                                                      공백은 단어에 포함되지 않는다는 것을 기억하자.)

First match: A1 B2 c3 d_4 e:5 ffGG77--__-- 
             -
All matches: A1 B2 c3 d_4 e:5 ffGG77--__-- 
             -- -- -- --- - - ------  --

Case 2
Regular Expression: \w*

First match: A1 B2 c3 d_4 e:5 ffGG77--__-- 
             --
All matches: A1 B2 c3 d_4 e:5 ffGG77--__-- 
             -- -- -- --- - - ------  --- 


Case 3
Regular Expression: [a-z]\w*   (a 부터 z 까지 글자가 오고 ,
                                                                그 다음에는 word 가 즉 [A-z0-9_] 이 올 수도 있고,
                                                                안 올수도 있다는 뜻이다.)
                       
First match: A1 B2 c3 d_4 e:5 ffGG77--__-- 
                   --
All matches: A1 B2 c3 d_4 e:5 ffGG77--__-- 
                   -- --- -   ------

Case 4
Regular Expression: \w{5}  (word 즉 [A-z0-9_] 5개를 의미함)

First match: A1 B2 c3 d_4 e:5 ffGG77--__-- 
                              -----
All matches: A1 B2 c3 d_4 e:5 ffGG77--__-- 
                              -----

Case 5
Regular Expression: [A-z0-9_]  ( [A-z0-9_] 은 \w와 같다)

First match: A1 B2 c3 d_4 e:5 ffGG77--__-- 
             - 
All matches: A1 B2 c3 d_4 e:5 ffGG77--__-- 
             -- -- -- --- - - ------  --

=============================================================================================

※  \W (대문자 W) 는 [^A-z0-9_] 뜻이다. 즉, word가 아닌것을 말한다.

Source

AS _34:AS11.23  @#$ %12^*  

Case 1
Regular Expression: \W

First match: AS _34:AS11.23 @#$ %12^* 
               -
All matches: AS _34:AS11.23  @#$ %12^* 
               -   -    -  -------  --

Case 2
Regular Expression: \w

First match:AS _34:AS11.23 @#$ %12^* 
            -
All matches:AS _34:AS11.23 @#$ %12^* 
            -- --- ---- --      -- 

Case 3
Regular Expression: [^A-z0-9_]  ( \W 와 같다)

First match: AS _34:AS11.23 @#$ %12^* 
               - 
All matches: AS _34:AS11.23  @#$ %12^* 
               -   -    -  -------  --

=============================================================================================

Case 1
Regular Expression: \s  (공백인것)

First match: Ere iron was found or tree was hewn
                -
All matches: Ere iron was found or tree was hewn
                -    -   -     -  -    -   -

Case 2
Regular Expression:  \S(공백이 아닌것)


First match: Ere iron was found or tree was hewn
             -   
All matches: Ere iron was found or tree was hewn
             --- ---- --- ----- -- ---- --- ----


=============================================================================================

Source

Page 123; published: 1234 id=12#24@112  

Case 1
Regular Expression: \d (숫자인것)

First match: Page 123; published: 1234 id=12#24@112 
                  -
All matches: Page 123; published: 1234 id=12#24@112 
                  ---             ----    -- -- --- 

Case 2
Regular Expression: \D (숫자가 아닌것)

First match: Page 123; published: 1234 id=12#24@112 
             -
All matches: Page 123; published: 1234 id=12#24@112 
             -----   -------------    ----  -  -

Case 3
Regular Expression: [0-9]  ( \d 와 같음)

First match: Page 123; published: 1234 id=12#24@112 
                  -
All matches: Page 123; published: 1234 id=12#24@112 
                  ---             ----    -- -- ---



※ 미리보기(lookahead) 기능

미리보기 찾기 패턴: 대두(?=족장)

미리보기를 하려면 (?= 로 시작해서 ) 로 감싸줘 미리 확인하려는 패턴을 지정하는 거다. 
괄호로 감싸주는데 그 시작을 물음표와 등호표시(?=) 를 붙여 줘야 한다는 말이다. 
미리보기는 특정 패턴을 찾되 또 다른 패턴이 뒤따라올 때만 찾으라고 조건을 다는 거다. 
앞의 경우는 대두 라는 단어를 만났을 때 뒤따라 오는 말이 족장 인 경우만 찾아달라는 의미가 된다. 대두족장 편집기에서 확인해 보자.

=============================================================================================

##############  간단한 정규 표현식   ##############

var re = /a/         --a 가 있는 문자열
var re = /a/i        --a 가 있는 문자열, 대소문자 구분 안함
var re = /apple/    -- apple가 있는 문자열
var re = /[a-z]/    -- a~z 사이의 모든 문자
var re = /[a-zA-Z0-9]/    -- a~z, A~Z 0~9 사이의 모든 문자
var re = /[a-z]|[0-9]/  -- a~z 혹은 0~9사이의 문자
var re = /a|b|c/   --  a 혹은 b 혹은 c인 문자
var re = /[^a-z]/  -- a~z까지의 문자가 아닌 문자("^" 부정)
var re = /^[a-z]/  -- 문자의 처음이 a~z로 시작되는 문장
var re = /[a-z]$/  -- 문자가 a~z로 끝남


상기에 정의된 간단한 표현식을 아래에 넣어 직접해 보시기 바랍니다.
var str = "sample string";
re.test(str)?"true":"false";

* 특수문자('''', ''^'', ''$'', ''*'', ''+'', ''?'', ''.'', ''('', '')'', ''|'', ''{'', ''}'', ''['', '']'')를 검색할 경우는 '''' 를 넣는다. 



##############  간단한 응용예제   ##############

1.모든 공백 체크 정규식
var regExp = /\s/g;


2.숫자만 체크 정규식
var regExp = /^[0-9]+$/;


3.이메일 체크 정규식
var regExp = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/i; 


4.핸드폰번호 정규식
var regExp = /^\d{3}-\d{3,4}-\d{4}$/;


5.일반 전화번호 정규식
var regExp = /^\d{2,3}-\d{3,4}-\d{4}$/;


6.아이디나 비밀번호 정규식 
var regExp = /^[a-z0-9_]{4,20}$/; 


7.휴대폰번호 체크 정규식 
var regExp = /^01([0|1|6|7|8|9]?)-?([0-9]{3,4})-?([0-9]{4})$/;


if ( !regExp.test( $(#hp).val() ) ) {
      alert("잘못된 휴대폰 번호입니다. 숫자, - 를 포함한 숫자만 입력하세요.");
      return false
} 


>>>자주 쓰이는 정규식(REGULAR EXPRESSION) 유형<<<

1. 암호:
조건1. 6~20 영문 대소문자
조건2. 최소 1개의 숫자 혹은 특수 문자를 포함해야 함
/^(?=.*[a-zA-Z])((?=.*\d)|(?=.*\W)).{6,20}$/


2. 전자우편 주소:
/^[a-z0-9_+.-]+@([a-z0-9-]+\.)+[a-z0-9]{2,4}$/


3. URL:
/^(file|gopher|news|nntp|telnet|https?|ftps?|sftp):\/\/([a-z0-9-]+\.)+[a-z0-9]{2,4}.*$/


4. HTML 태그 - HTML tags:
/\<(/?[^\>]+)\>/


5. 전화번호 - 예: 123-123-2344 또는 123-1234-2344 :
/(\d{3}).*(\d{3}).*(\d{4})/


6. 날짜 - 예: 3/28/2007 또는 3/28/07 :
/^\d{1,2}\/\d{1,2}\/\d{2,4}$/


7.  jpg, gif 또는 png 확장자를 가진 그림 파일명:
/([^\s]+(?=\.(jpg|gif|png))\.\2)/


8. 1부터 50 사이의 번호 - 1과 50 포함 :
/^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$/


9. 16 진수로 된 색깔 번호:
/#?([A-Fa-f0-9]){3}(([A-Fa-f0-9]){3})?/



--이메일 체크
var re = /\w+@\w+\.\w+/g; 

-- 비밀번호,아이디체크 영문,숫자만허용, 6~12자리
var re = /^[A-Za-z0-9]{6,12}$/g; 


-- 숫자/문자/특수문자/ 포함 형태의 8~15자리 이내의 암호 정규식 1
var re = /^.*(?=^.{8,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&*+=-]).*$/g;  

또는

-- 숫자/문자/특수문자/ 포함 형태의 8~15자리 이내의 암호 정규식 2
var re = /^.*(?=^.{8,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).*$/g;


-- 홈페이지 체크
var re = new RegExp("(http|https|ftp|telnet|news|irc)://([-/.a-zA-Z0-9_~#%$?&=:200-377()]+)","gi") 


-- 태그제거 
var re = "<[^<|>]*>";  

-- 태그제거 
var re = /[<][^>]*[>]/gi;
str = str.replace(RegExpTag,"");  

-- 스크립트 제거  
var RegExpJS = "<script[^>]*>(.*?)</script>";  
str = str.replace(RegExpJS,"");  

-- 스타일 제거  
var RegExpCSS = "<style[^>]*>(.*?)";  
str = str.replace(RegExpCSS,"");  

-- 한글 제거
var RegExpHG = "(/[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/)";    
str = str.replace(RegExpHG,"");  

-- 주석 제거 
var RegExpDS = /<!--[^>](.*?)-->/g;     
str6 = str.replace(RegExpDS,"");  

--이메일 체크
var regExp = /[a-z0-9]{2,}@[a-z0-9]{2,}.[a-z0-9]{2,}/i; 


## 기타 응용
re = new RegExp("^@[a-zA-Z0-9]+s+","i");//문장의 처음이 @이고 문자가 1나 이상 있으면 ok


기타 상기와 동일하나 약간씩 다른 샘픔
영숫자 조합책크
if ((new RegExp(/[^a-z|^0-9]/gi)).test(frm.loginid.value)) {
    alert("ID는 영숫자 조합만 사용하세요"); 
    frm.loginid.focus(); 
}

홈페이지 주소 책크
 function chk(v){
  str='';
  re = new RegExp("^http://","i");  
  re.test(v)?str='y':str='n';
  alert(str);
 }

hanmail인지를 책크
 function chk(v){
  str='';
  re = new RegExp("hanmail.net","i");  
  re.test(v)?str=true:str=false;
  return str
 }

//본문내에서 도메인 구하기
var patt = /(http(s)?://)?w+(.w+)+/gi;
      var result = (aa.value.match(patt));

//본문내에서 url구하기
상기와 유사 var patt = /(http(s)?://)?w+(.w+).S*-gi;


########### 정규식 메소드 및 사용법 ###########

참조 http://eknote.tistory.com/1251
참조 http://www.javascriptkit.com/javatutors/redev3.shtml
RegExp.exec(string)
RegExp.test(string)
String.match(pattern)
String.search(pattern)
String.replace(pattern,string)
String.split(pattern)
